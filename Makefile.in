#	$Id$
#
# Makefile.in for top-level of pcc.
#

@SET_MAKE@

C_SUBDIRS=	common/abi
CC_SUBDIR=	cc
EXTRA_SUBDIRS=	pascal f77
ALL_SUBDIRS=	$(C_SUBDIRS) $(CC_SUBDIR)
DIST_SUBDIRS=	$(C_SUBDIRS) $(CC_SUBDIR) $(EXTRA_SUBDIRS)

# Minimal C-only build (stage 0 bootstrap)
all-c install-c clean-c:
	@target=`echo $@ | sed 's/-c//'`; \
	for subdir in $(C_SUBDIRS); do \
		_nextdir_=$${_thisdir_+$$_thisdir_/}$$subdir; \
		echo "===> $$_nextdir_"; \
		(_thisdir_=$$_nextdir_; export _thisdir_; cd $$subdir && \
		    exec $(MAKE) $(MFLAGS) $$target) || exit $$?; \
		echo "<=== $$_nextdir_"; \
	done
	@_nextdir_=cc; \
	echo "===> $$_nextdir_"; \
	(cd cc && exec $(MAKE) $(MFLAGS) `echo $@ | sed 's/-c//'`) || exit $$?; \
	echo "<=== $$_nextdir_"

# Standard build (C + C++)
all install clean:
	@for subdir in $(ALL_SUBDIRS); do \
		_nextdir_=$${_thisdir_+$$_thisdir_/}$$subdir; \
		echo "===> $$_nextdir_"; \
		(_thisdir_=$$_nextdir_; export _thisdir_; cd $$subdir && \
		    exec $(MAKE) $(MFLAGS) $@) || exit $$?; \
		echo "<=== $$_nextdir_"; \
	done

# Full build with all languages (C, C++, Pascal, F77)
all-full install-full clean-full:
	@target=`echo $@ | sed 's/-full//'`; \
	for subdir in $(C_SUBDIRS) $(CC_SUBDIR) $(EXTRA_SUBDIRS); do \
		_nextdir_=$${_thisdir_+$$_thisdir_/}$$subdir; \
		echo "===> $$_nextdir_"; \
		(_thisdir_=$$_nextdir_; export _thisdir_; cd $$subdir && \
		    exec $(MAKE) $(MFLAGS) $$target) || exit $$?; \
		echo "<=== $$_nextdir_"; \
	done

distclean:
	@for subdir in $(DIST_SUBDIRS); do \
		_nextdir_=$${_thisdir_+$$_thisdir_/}$$subdir; \
		echo "===> $$_nextdir_"; \
		(_thisdir_=$$_nextdir_; export _thisdir_; cd $$subdir && \
		    exec $(MAKE) $(MFLAGS) $@) || exit $$?; \
		echo "<=== $$_nextdir_"; \
	done
	rm -rf Makefile config.log stamp-h1 config.status \
	    configure.lineno config.h autom4te.cache

# Bootstrap targets
bootstrap:
	@echo "Starting multi-stage bootstrap..."
	@if [ ! -x ./bootstrap.sh ]; then \
		echo "Error: bootstrap.sh not found or not executable"; \
		exit 1; \
	fi
	./bootstrap.sh --stages=3 --compare-stages

bootstrap-quick:
	@echo "Starting quick bootstrap (2 stages)..."
	./bootstrap.sh --stages=2

bootstrap-full:
	@echo "Starting full bootstrap with verification..."
	./bootstrap.sh --stages=3 --compare-stages

bootstrap-clean:
	@echo "Cleaning bootstrap directories..."
	rm -rf bootstrap-build

.PHONY: bootstrap bootstrap-quick bootstrap-full bootstrap-clean
.PHONY: all-c install-c clean-c all-full install-full clean-full
