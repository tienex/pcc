#	$Id$
#
# Makefile.in for gocom (Go compiler frontend)
#

VPATH=@srcdir@
srcdir=@srcdir@
top_srcdir=@top_srcdir@
top_builddir=@top_builddir@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libexecdir = @libexecdir@
datarootdir = @datarootdir@
mandir = @mandir@
CC = @CC@
EXEEXT = @EXEEXT@
CFLAGS = @CFLAGS@ @ADD_CFLAGS@
CPPFLAGS = @CPPFLAGS@ @ADD_CPPFLAGS@ -I$(srcdir) -I$(top_builddir) \
	-I$(top_srcdir)/mip -I$(top_srcdir)/os/$(TARGOS) \
	-Dmach_$(TARGMACH) -Dos_$(TARGOS) -DLANG_GO
LIBS = @LIBS@
LDFLAGS = @LDFLAGS@
LEX = @LEX@
LFLAGS = @LFLAGS@
YACC = @YACC@
YFLAGS = @YFLAGS@
INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

DEST=@libexecdir@/pcc
MIPDIR=$(top_srcdir)/mip
MDIR=$(top_srcdir)/arch/$(TARGMACH)

OBJS=main.o error.o symtab.o types.o builtins.o \
     scan.o gram.o

# MIP backend objects (from ../../mip)
MIPOBJS=$(top_builddir)/mip/common.o $(top_builddir)/mip/match.o \
	$(top_builddir)/mip/reader.o $(top_builddir)/mip/optim2.o \
	$(top_builddir)/mip/regs.o

# Machine-specific objects (from ../../arch/$(TARGMACH))
MACHOBJS=$(top_builddir)/arch/$(TARGMACH)/local.o \
	$(top_builddir)/arch/$(TARGMACH)/local2.o \
	$(top_builddir)/arch/$(TARGMACH)/code.o \
	$(top_builddir)/arch/$(TARGMACH)/order.o \
	$(top_builddir)/arch/$(TARGMACH)/table.o

all: gocom$(EXEEXT)

gocom$(EXEEXT): $(OBJS) $(MIPOBJS) $(MACHOBJS)
	$(CC) $(LDFLAGS) $(OBJS) $(MIPOBJS) $(MACHOBJS) -o $@ $(LIBS)

# Generated files
scan.c: scan.l
	$(LEX) $(LFLAGS) -t $(srcdir)/scan.l > scan.c

gram.c y.tab.h: gram.y
	$(YACC) $(YFLAGS) -d $(srcdir)/gram.y
	mv y.tab.c gram.c

# Dependencies
main.o: main.c pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/main.c

error.o: error.c error.h pass1.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/error.c

symtab.o: symtab.c pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/symtab.c

types.o: types.c pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/types.c

builtins.o: builtins.c pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $(srcdir)/builtins.c

scan.o: scan.c y.tab.h pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c scan.c

gram.o: gram.c pass1.h error.h
	$(CC) $(CPPFLAGS) $(CFLAGS) -c gram.c

install: all
	test -z "$(DEST)" || mkdir -p "$(DEST)"
	$(INSTALL_PROGRAM) gocom$(EXEEXT) $(DEST)

clean:
	rm -f $(OBJS) gocom$(EXEEXT) scan.c gram.c y.tab.h y.tab.c

distclean: clean
	rm -f Makefile

.PHONY: all install clean distclean
