PDP-10 Backend for PCC
======================

This is the PDP-10 target backend for the Portable C Compiler (PCC).
It supports both native PDP-10 type sizes and an experimental power-of-2
mode for better portability.


Type Size Modes
---------------

The PDP-10 backend can be compiled in two modes:

1. Native PDP-10 mode (default):
   - CHAR:     9 bits (unsigned by default)
   - SHORT:    18 bits
   - INT:      36 bits
   - LONG:     36 bits
   - LONGLONG: 72 bits
   - FLOAT:    36 bits (PDP-10 native format)
   - DOUBLE:   72 bits (PDP-10 native format)
   - POINTER:  36 bits
   - Word-addressed memory (4 bytes per word)

2. Power-of-2 mode (compile with -DPDP10_POW2):
   - CHAR:     8 bits (signed by default)
   - SHORT:    16 bits
   - INT:      32 bits
   - LONG:     64 bits
   - LONGLONG: 64 bits
   - FLOAT:    32 bits (VAX F-floating format)
   - DOUBLE:   64 bits (VAX D-floating format)
   - POINTER:  64 bits
   - Byte-addressed memory (8 bytes per word)

   Note: VAX floating-point format is used instead of IEEE 754 because:
   - It's already implemented in PCC's softfloat library
   - Similar architecture philosophy to PDP-10
   - Better compatibility for cross-compilation scenarios


Runtime Configuration
---------------------

The backend supports runtime configuration via -m flags:

  -masm=<format>   Set assembly output format
                   - gnu (default): GNU assembler syntax
                   - midas: MIDAS assembler syntax (ITS/MIT)

  -mabi=<format>   Set ABI/object file format
                   - elf (default): ELF object format
                   - macho: Mach-O object format (Darwin/macOS)
                   - pecoff (or pe): PE/COFF format (Windows)
                   - none: Generic format (MIDAS-style)

  -mpow2           EXPERIMENTAL: Enable runtime power-of-2 type mode
                   (see "Experimental POW2 Mode" below)


Assembly Output Formats
-----------------------

GNU assembler format (default):
  - Standard .text, .data, .bss sections
  - C-style labels (name:)
  - ELF/Mach-O/PE-COFF directives when applicable

MIDAS assembler format:
  - LOC directives for segment switching
  - Double-colon labels (name::)
  - Compatible with ITS/TOPS-20 MIDAS assembler


Experimental POW2 Mode (-mpow2)
-------------------------------

WARNING: The -mpow2 runtime flag is EXPERIMENTAL and has significant
limitations. It is intended for cross-compilation experiments only.

When -mpow2 is used, the compiler ATTEMPTS to generate code using
power-of-2 type sizes instead of native PDP-10 sizes, but this mode
has fundamental architectural limitations:

TWO SCENARIOS:

Scenario 1: PCC compiled WITH -DPDP10_POW2 (CORRECT configuration):
  - Uses compile-time power-of-2 types (8/16/32/64 bit)
  - Uses VAX F/D floating-point format (32/64 bit)
  - All type sizes, struct layouts, and FP operations are correct
  - The -mpow2 runtime flag is redundant but harmless

Scenario 2: PCC compiled WITHOUT -DPDP10_POW2 + runtime -mpow2 (BROKEN!):
  - Register allocation: Uses runtime pdp10_szty() (WORKS)
  - Argument passing: Uses runtime sizes (WORKS)
  - Floating-point: Uses PDP-10 format (36/72-bit) (WRONG - should be VAX!)
  - Struct layouts: Uses native offsets (9/18/36-bit) (WRONG - should be 8/16/32!)
  - Array indexing: Uses native element sizes (WRONG!)
  - Multi-character constants: Uses 9-bit bytes (WRONG - should be 8-bit!)
  - Result: COMPLETELY BROKEN CODE

WHAT WORKS IN SCENARIO 2:
  - Runtime type size query functions (pdp10_szchar(), etc.)
  - Runtime register allocation (pdp10_szty())
  - Runtime byte offset calculation (pdp10_byteoff())
  - Runtime word-addressing mode (pdp10_is_word_addressed())
  - Register class selection (PCLASS, RETREG)
  - Argument register allocation

WHAT DOESN'T WORK IN SCENARIO 2:
  - Floating-point operations (PDP-10 format vs expected VAX format)
  - Struct layouts (9/18/36-bit offsets vs expected 8/16/32-bit)
  - Array indexing (wrong element sizes)
  - Multi-character constants (9-bit vs 8-bit bytes)
  - Essentially EVERYTHING except simple integer register operations

RECOMMENDATION:
  The -mpow2 runtime flag is for TESTING ONLY. For actual POW2 support,
  you MUST recompile PCC itself with -DPDP10_POW2. The runtime flag will
  detect this and warn you appropriately.

The runtime -mpow2 flag exists only for experimental purposes and to
demonstrate the architectural challenges of runtime type size switching
in PCC.


PDP-10 C Calling Convention
---------------------------

Register 1-7 are argument registers. Types of sizes up to 36 bits are
given in one register, two otherwise. CHAR and SHORT are given as INTs.

If the argument that would end up in register 7 requires two registers,
it is saved on the stack instead and no more registers would end up
on the stack.

struct return: a hidden argument containing the address of the struct
is stored as the first argument _on_the_stack_, never in register.

struct argument: always saved on stack, and terminates the list
of arguments that are kept in registers.

In case of debugging all arguments are saved on stack in the function.

All variadic arguments are always saved on the stack.


Register Allocation
-------------------

The PDP-10 has 16 general-purpose registers (0-17 octal):
  R0:       Reserved (special addressing constraints)
  R1-R7:    Argument registers / temporaries
  R10-R15:  Permanent registers (callee-saved)
  R16 (FP): Frame pointer
  R17 (SP): Stack pointer

Register pairs (for 72-bit or 64-bit values):
  XR1-XR14: Consecutive register pairs for double-word values


Floating-Point Support
----------------------

Native mode (default):
  - Uses PDP-10's proprietary 36/72-bit floating-point format
  - Implemented via PCC's softfloat library with PDP10FLOAT

Power-of-2 mode (compile with -DPDP10_POW2):
  - Uses VAX F-floating (32-bit) and D-floating (64-bit) formats
  - Implemented via PCC's softfloat library with FDFLOAT
  - VAX format chosen for better PDP-10 compatibility than IEEE 754

Note: The floating-point format is a COMPILE-TIME choice. Using the runtime
-mpow2 flag does NOT change the floating-point format and will produce
incorrect code. Always recompile with -DPDP10_POW2 for correct POW2 support.


Thread-Local Storage and PIC
-----------------------------

The backend supports TLS and PIC segments:
  - TLSDATA, TLSUDATA: Thread-local storage
  - PICDATA, PICRDATA, PICLDATA: Position-independent code

These are primarily useful for modern OS ports (Linux, *BSD) running
under PDP-10 emulation.


Cross-Compilation
-----------------

The PDP-10 backend is designed to work correctly as a cross-compiler
from modern hosts (Linux, macOS, Windows) to PDP-10 targets.

Example cross-compilation:
  $ pcc -target pdp10 -masm=gnu -mabi=elf -o program.o program.c
  $ pcc -target pdp10 -masm=midas -mabi=none -o program.s program.c


For More Information
--------------------

See the PCC documentation and the source files in arch/pdp10/:
  - macdefs.h: Architecture definitions and runtime configuration
  - code.c: Code generation and runtime helper functions
  - local2.c: Instruction selection and optimization
  - table.c: Instruction templates
